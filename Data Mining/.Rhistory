### 1. Import and clean data
# A. Import data. Load character variable as character strings first (stringsAsFactors = FALSE).
BartRider <- read.csv(file = "BartRider.csv", stringsAsFactors = FALSE)
# B.	Show the overall structure and summary of the input data.
str(BartRider)
summary(BartRider)
# C.	Transform DualInc, Gender, Language, OwnRent, and Rider to factor variables. Show the overall structure and summary of the input data again.
BartRider$DualInc <- factor(BartRider$DualInc)
BartRider$Gender <- factor(BartRider$Gender)
BartRider$Language <- factor(BartRider$Language)
BartRider$OwnRent <- factor(BartRider$OwnRent)
BartRider$Rider <- factor(BartRider$Rider)
str(BartRider)
summary(BartRider)
### 2. Data partitioning and inspection code
# A.	Partition the data set for simple hold-out evaluation - 70% for training and the other 30% for testing.
library(caret)
set.seed(100)
train_index <- createDataPartition(BartRider$Rider, p=0.7, list=FALSE)
datTrain <- BartRider[train_index,]
datTest <- BartRider[-train_index,]
# B.	Show the overall structure and summary of train and test sets. Show the distributions of Rider in the entire set, the train set and the test set.
str(datTrain)
summary(datTrain)
str(datTest)
summary(datTest)
prop.table(table(BartRider$Rider))
prop.table(table(datTrain$Rider))
prop.table(table(datTest$Rider))
### 3. SVM for classification (5 points)
# A. Build a SVM model with C=5
library(kernlab)
library(rminer)
svm_model <- ksvm(Rider~.,data=datTrain)
svm_model
prediction_on_train <- predict(svm_model, datTrain)
prediction_on_test <- predict(svm_model, datTest)
mmetric(datTrain$Rider,prediction_on_train, metric="CONF")
mmetric(datTest$Rider,prediction_on_test, metric="CONF")
mmetric(datTrain$Rider,prediction_on_train,metric=c("ACC","PRECISION","TPR","F1"))
mmetric(datTest$Rider,prediction_on_test,metric=c("ACC","PRECISION","TPR","F1"))
library(RWeka)
MLP <- make_Weka_classifier("weka/classifiers/functions/MultilayerPerceptron")
mlp_model <-  MLP(IsBadBuy~.,data=datTrain, control = Weka_control(N=100, H='8, 4'))
summary(mlp_model)
library(kernlab)
library(rminer)
svm_model <- ksvm(Rider~.,data=datTrain)
svm_model
prediction_on_train <- predict(svm_model, datTrain)
prediction_on_test <- predict(svm_model, datTest)
mmetric(datTrain$Rider,prediction_on_train, metric="CONF")
mmetric(datTest$Rider,prediction_on_test, metric="CONF")
mmetric(datTrain$Rider,prediction_on_train,metric=c("ACC","PRECISION","TPR","F1"))
mmetric(datTest$Rider,prediction_on_test,metric=c("ACC","PRECISION","TPR","F1"))
mmetric(datTrain$Rider,prediction_on_train, metric="CONF")
mmetric(datTest$Rider,prediction_on_test, metric="CONF")
mmetric(datTrain$Rider,prediction_on_train,metric=c("ACC","PRECISION","TPR","F1"))
mmetric(datTest$Rider,prediction_on_test,metric=c("ACC","PRECISION","TPR","F1"))
mmetric(datTrain$Rider,prediction_on_train, metric="CONF")
mmetric(datTest$Rider,prediction_on_test, metric="CONF")
mmetric(datTrain$Rider,prediction_on_train,metric=c("ACC","PRECISION","TPR","F1"))
mmetric(datTest$Rider,prediction_on_test,metric=c("ACC","PRECISION","TPR","F1"))
prediction_on_trainSVM <- predict(svm_model, datTrain)
prediction_on_testSVM <- predict(svm_model, datTest)
prediction_on_trainMLP <- predict(mlp_model, datTrain)
prediction_on_testMLP <- predict(mlp_model, datTest)
mmetric(datTrain$Rider,prediction_on_trainSVM, metric="CONF")
mmetric(datTest$Rider,prediction_on_testSVM, metric="CONF")
mmetric(datTrain$Rider,prediction_on_trainSVM,metric=c("ACC","PRECISION","TPR","F1"))
mmetric(datTest$Rider,prediction_on_testSVM,metric=c("ACC","PRECISION","TPR","F1"))
mmetric(datTrain$Rider,prediction_on_trainMLP, metric="CONF")
mmetric(datTest$Rider,prediction_on_testMLP, metric="CONF")
mmetric(datTrain$Rider,prediction_on_trainMLP,metric=c("ACC","PRECISION","TPR","F1"))
mmetric(datTest$Rider,prediction_on_testMLP,metric=c("ACC","PRECISION","TPR","F1"))
prediction_on_trainMLP <- predict(mlp_model, datTrain)
prediction_on_testMLP <- predict(mlp_model, datTest)
library(RWeka)
MLP <- make_Weka_classifier("weka/classifiers/functions/MultilayerPerceptron")
mlp_model <-  MLP(Rider~.,data=datTrain, control = Weka_control(N=100, H='8, 4'))
summary(mlp_model)
prediction_on_trainMLP <- predict(mlp_model, datTrain)
prediction_on_testMLP <- predict(mlp_model, datTest)
mmetric(datTrain$Rider,prediction_on_trainMLP, metric="CONF")
mmetric(datTest$Rider,prediction_on_testMLP, metric="CONF")
mmetric(datTrain$Rider,prediction_on_trainMLP,metric=c("ACC","PRECISION","TPR","F1"))
mmetric(datTest$Rider,prediction_on_testMLP,metric=c("ACC","PRECISION","TPR","F1"))
mmetric(datTrain$Rider,prediction_on_trainSVM, metric="CONF")
mmetric(datTest$Rider,prediction_on_testSVM, metric="CONF")
mmetric(datTrain$Rider,prediction_on_trainSVM,metric=c("ACC","PRECISION","TPR","F1"))
mmetric(datTest$Rider,prediction_on_testSVM,metric=c("ACC","PRECISION","TPR","F1"))
### 1. Import and clean data
# A. Import data. Load character variable as character strings first (stringsAsFactors = FALSE).
Sales <- read.csv(file = "sales.csv", stringsAsFactors = FALSE)
# B.	Show the overall structure and summary of the input data.
str(Sales)
summary(Sales)
# C. Remove the Name column
Sales$Name <- NULL
# D. Transform Platform, Genre, and Rating to factor variables. Show the overall structure and summary of the input data again.
Sales$Platform <- factor(Sales$Platform)
Sales$Genre <- factor(Sales$Genre)
Sales$Rating <- factor(Sales$Rating)
str(Sales)
summary(Sales)
### 2. Data partitioning
# A.	Partition the data set for simple hold-out evaluation - 70% for training and the other 30% for testing.
set.seed(100)
### 2. Data partitioning
# A.	Partition the data set for simple hold-out evaluation - 70% for training and the other 30% for testing.
set.seed(100)
train_index <- createDataPartition(Sales$Global_Sales, p=0.7, list=FALSE)
datTrain_sale <- Sales[train_index,]
datTest_sale <- Sales[-train_index,]
